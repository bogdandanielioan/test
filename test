import type { Outline, Position } from '../../../repair/models';
import { OutlineType } from '../../enums/outline-type.enum';
import { Path, Shape, Vector2 } from 'three';
import { Delaunay } from 'd3-delaunay';
import { arcToPoints } from './pcb-viewer.utils.ts';

const ARC_SEGMENTS = 16;
const CIRCLE_SEGMENTS = 32;
const ALPHA = 0.7;

export function alphaShapesFromOutlines(
  outlines: Outline[],
  alpha: number = ALPHA
): (Shape | Path)[] {
  const pts: Position[] = [];
  outlines.forEach(o => {
    switch (o.type) {
      case OutlineType.Line:
      case OutlineType.Polygon:
        pts.push(...o.points);
        break;
      case OutlineType.Rectangle:
        if (o.start && o.end) {
          pts.push(
            { x: o.start.x, y: o.start.y },
            { x: o.start.x, y: o.end.y },
            { x: o.end.x, y: o.end.y },
            { x: o.end.x, y: o.start.y }
          );
        }
        break;
      case OutlineType.Circle:
        if (o.location && o.radius) {
          for (let i = 0; i < CIRCLE_SEGMENTS; i++) {
            const θ = (i / CIRCLE_SEGMENTS) * Math.PI * 2;
            pts.push({
              x: o.location.x + Math.cos(θ) * o.radius,
              y: o.location.y + Math.sin(θ) * o.radius
            });
          }
        }
        break;
      case OutlineType.Arc:
        pts.push(...arcToPoints(o, ARC_SEGMENTS));
        break;
    }
  });

  if (pts.length < 2) return [];

  type P = [number, number];
  const coords: P[] = pts.map(p => [p.x, p.y]);

  const delaunay = Delaunay.from(coords);
  const edges = new Map<string, [P, P]>();

  const toggle = (i: number, j: number) => {
    const a = coords[Math.min(i, j)];
    const b = coords[Math.max(i, j)];
    const key = `${a}|${b}`;
    edges.has(key) ? edges.delete(key) : edges.set(key, [a, b]);
  };

  const triQuality = (ia: number, ib: number, ic: number) => {
    const A = coords[ia], B = coords[ib], C = coords[ic];
    const area = Math.abs(
      (A[0] * (B[1] - C[1]) + B[0] * (C[1] - A[1]) + C[0] * (A[1] - B[1])) / 2
    );
    const maxE = Math.max(
      distance(A, B), distance(B, C), distance(C, A)
    );

    return area / (maxE * maxE);
  };

  for (let t = 0; t < delaunay.triangles.length; t += 3) {
    const ia = delaunay.triangles[t],
      ib = delaunay.triangles[t + 1],
      ic = delaunay.triangles[t + 2];

    if (triQuality(ia, ib, ic) < alpha) {
      toggle(ia, ib);
      toggle(ib, ic);
      toggle(ic, ia);
    }
  }

  if (edges.size < 1) return [];

  const shapes: (Shape | Path)[] = [];
  const edgeMap = new Map<string, P[]>();

  // Construim maparea punctelor la vecini
  edges.forEach(([a, b]) => {
    const keyA = `${a}`;
    const keyB = `${b}`;

    const listA = edgeMap.get(keyA) ?? [];
    listA.push(b);
    edgeMap.set(keyA, listA);

    const listB = edgeMap.get(keyB) ?? [];
    listB.push(a);
    edgeMap.set(keyB, listB);
  });

  const visited = new Set<string>();

  // Procesăm toate marginile rămase
  edges.forEach(([start]) => {
    const sKey = `${start}`;
    if (visited.has(sKey)) return;

    const points: Vector2[] = [];
    let current = start;
    let isClosed = false;

    // Mergem într-o direcție (spre un vecin)
    while (true) {
      const cKey = `${current}`;
      if (visited.has(cKey)) break;
      
      visited.add(cKey);
      points.push(new Vector2(current[0], current[1]));

      const neighbors = edgeMap.get(cKey) ?? [];
      const next = neighbors.find(p => !visited.has(`${p}`));

      if (!next) break;
      current = next;

      // Verificăm dacă am închis bucla
      if (current[0] === start[0] && current[1] === start[1]) {
        isClosed = true;
        break;
      }
    }

    // Dacă nu e închis, mergem și în cealaltă direcție (de la start)
    if (!isClosed) {
      current = start;
      const reversePoints: Vector2[] = [];
      
      while (true) {
        const cKey = `${current}`;
        if (visited.has(cKey)) break;
        
        visited.add(cKey);
        reversePoints.unshift(new Vector2(current[0], current[1]));

        const neighbors = edgeMap.get(cKey) ?? [];
        const next = neighbors.find(p => !visited.has(`${p}`));

        if (!next) break;
        current = next;
      }

      points.unshift(...reversePoints);
    }

    if (points.length >= 2) {
      if (isClosed && points.length >= 3) {
        shapes.push(new Shape(points));
      } else {
        const path = new Path(points);
        shapes.push(path);
      }
    }
  });

  return shapes;
}

function distance(a: [number, number], b: [number, number]) {
  return Math.hypot(a[0] - b[0], a[1] - b[1]);
}
